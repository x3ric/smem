#!/bin/bash

cat > /tmp/test.c << 'EOF'
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <readline/readline.h>
#include <readline/history.h>

#define STACK_SIZE 1024

typedef struct {
    int ivar;
    float fvar;
    double dvar;
    unsigned char bvar;
    char stack[STACK_SIZE];
    int top;
} REPLContext;

void set_variable(REPLContext *ctx, const char *type, const char *value) {
    if (strcmp(type, "int") == 0) {
        sscanf(value, "%d", &ctx->ivar);
    } else if (strcmp(type, "float") == 0) {
        sscanf(value, "%f", &ctx->fvar);
    } else if (strcmp(type, "double") == 0) {
        sscanf(value, "%lf", &ctx->dvar);
    } else if (strcmp(type, "byte") == 0) {
        int temp;
        sscanf(value, "%d", &temp);
        ctx->bvar = (unsigned char)(temp & 0xFF);
    }
}

void show_variable(REPLContext *ctx, const char *type) {
    if (strcmp(type, "int") == 0) {
        printf("%d\n", ctx->ivar);
    } else if (strcmp(type, "float") == 0) {
        printf("%.2f\n", ctx->fvar);
    } else if (strcmp(type, "double") == 0) {
        printf("%.2lf\n", ctx->dvar);
    } else if (strcmp(type, "byte") == 0) {
        printf("%u\n", ctx->bvar);
    }
}

void display_help() {
    printf(" Types:\n  int\n  byte\n  float\n  double\n");
    printf(" Commands:\n");
    printf("  exit               : Quit\n");
    printf("  help               : Show this help message.\n");
    printf("  show <type>        : Show a variable;\n");
    printf("  set <type> <value> : Set a variable;\n");
    printf("  pid                : Show the process pid.\n");
}

int main() {
    REPLContext ctx = {0, 0.0, 0.0, 0, {0}, 0};
    while (1) {
        char *input = readline("> ");
        if (!input) break;
        if (*input) add_history(input);

        if (strcmp(input, "help") == 0) {
            display_help();
        } else if (strcmp(input, "pid") == 0) {
            printf("%d\n", getpid());
        } else if (strncmp(input, "set ", 4) == 0) {
            char type[10], value[50];
            if (sscanf(input + 4, "%s %s", type, value) == 2) {
                set_variable(&ctx, type, value);
            }
        } else if (strncmp(input, "show ", 5) == 0) {
            char type[10];
            if (sscanf(input + 5, "%s", type) == 1) {
                show_variable(&ctx, type);
            }
        } else if (strcmp(input, "exit") == 0) {
            free(input);
            break;
        } else {
            printf("Unknown command. Type 'help'.\n");
        }
        free(input);
    }
    return 0;
}
EOF

gcc /tmp/test.c -o /tmp/test -lreadline
chmod +x /tmp/test
/tmp/test
